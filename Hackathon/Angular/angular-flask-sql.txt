–î–∞–≤–∞–π! –ò—Å–ø–æ–ª—å–∑—É–µ–º Flask –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏, –∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ–º –≤–∑—è—Ç—å PostgreSQL –∏–ª–∏ MySQL (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —Å–∫–∞–∂–∏).


1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º Flask –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQL:

pip install flask flask-cors psycopg2-binary  # –¥–ª—è PostgreSQL
pip install flask flask-cors mysql-connector-python  # –¥–ª—è MySQL

flask ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API.
flask-cors ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç Angular –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –¥—Ä—É–≥–æ–≥–æ –¥–æ–º–µ–Ω–∞ (CORS).
psycopg2-binary ‚Äî –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è PostgreSQL.
mysql-connector-python ‚Äî –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è MySQL.


2. –°–æ–∑–¥–∞—ë–º Flask-—Å–µ—Ä–≤–µ—Ä
–°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª server.py:

from flask import Flask, jsonify
from flask_cors import CORS
import psycopg2  # –∏–ª–∏ import mysql.connector –¥–ª—è MySQL

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
DB_CONFIG = {
    'dbname': 'your_database',
    'user': 'your_user',
    'password': 'your_password',
    'host': 'localhost',
    'port': 5432  # –î–ª—è PostgreSQL (—É–∫–∞–∂–∏—Ç–µ 3306, –µ—Å–ª–∏ MySQL)
}

conn = psycopg2.connect(**DB_CONFIG)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ mysql.connector.connect() –¥–ª—è MySQL

@app.route('/data', methods=['GET'])
def get_data():
    try:
        cur = conn.cursor()
        cur.execute("SELECT * FROM your_table")  # –ó–∞–º–µ–Ω–∏—Ç–µ your_table –Ω–∞ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É
        rows = cur.fetchall()
        cur.close()

        return jsonify(rows)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True, port=5000)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ 5000 –ø–æ—Ä—Ç—É


3. –ù–∞—Å—Ç—Ä–æ–∏–º Angular –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Flask
–¢–µ–ø–µ—Ä—å –≤ Angular —Å–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API:

üìå –î–æ–±–∞–≤–ª—è–µ–º HttpClientModule –≤ app.module.ts
–û—Ç–∫—Ä—ã–≤–∞–µ–º src/app/app.module.ts –∏ –¥–æ–±–∞–≤–ª—è–µ–º:

import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [
    HttpClientModule
  ],
})
export class AppModule { }



–°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (data.service.ts)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DataService {

  private apiUrl = 'http://localhost:5000/data';  // –ê–¥—Ä–µ—Å Flask-—Å–µ—Ä–≤–µ—Ä–∞

  constructor(private http: HttpClient) { }

  getData(): Observable<any> {
    return this.http.get<any>(this.apiUrl);
  }
}


–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ (app.component.ts)

import { Component, OnInit } from '@angular/core';
import { DataService } from './data.service';

@Component({
  selector: 'app-root',
  template: `
    <h1>–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î</h1>
    <ul>
      <li *ngFor="let item of data">{{ item }}</li>
    </ul>
  `,
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  data: any[] = [];

  constructor(private dataService: DataService) {}

  ngOnInit() {
    this.dataService.getData().subscribe(response => {
      this.data = response;
    });
  }
}


4. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ Angular
1Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä:

python server.py


2Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º Angular-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

ng serve

–¢–µ–ø–µ—Ä—å Angular –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQL —á–µ—Ä–µ–∑ Flask üöÄ.

‚û° –¢–µ–±–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?
